<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hamza</title>
    <description></description>
    <link>https://ismnoiet.github.io/</link>
    <atom:link href="https://ismnoiet.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 11 May 2020 21:43:18 +0300</pubDate>
    <lastBuildDate>Mon, 11 May 2020 21:43:18 +0300</lastBuildDate>
    <generator>Jekyll v3.8.0</generator>
    
      <item>
        <title>Introduction To Rollup.js</title>
        <description>
&lt;p&gt;&lt;a href=&quot;http://&quot;&gt;Rollup.js&lt;/a&gt; 
is the next generation module bundler as we can read from 
their official website.
which means we can write next generation modules(es6 modules) and then use rollup to bundle(concatenate) them in a single file.&lt;/p&gt;

&lt;p&gt;The first thing to do obviously is to install rollup, for this article i choosed to install it globally, so the &lt;code class=&quot;highlighter-rouge&quot;&gt;rollup&lt;/code&gt; command availabe in the command line, here is the snippet to install it:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install -g rollup
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Note :&lt;/strong&gt; in some computers we need to be an administrator
in order to install node global modules in this case just 
proceed the previous command with a leading &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;After installing rollup, we can try to use it with the following simple example :&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/* src/UsersCollection.js  */&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UsersCollection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]){&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;users&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	
	&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UsersCollection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/* src/main.js will import UsersCollection and use it for its need. */&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/* src/main.js */&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UsersCollection&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./UsersCollection'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;usersCollection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UsersCollection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'user1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'user2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;usersCollection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If we run :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rollup src/main.js 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;the needed parts of code from &lt;code class=&quot;highlighter-rouge&quot;&gt;UsersCollection.js&lt;/code&gt; will be added to &lt;code class=&quot;highlighter-rouge&quot;&gt;main.js&lt;/code&gt; and the bundle file will be printed out
to the terminal, without being stored persistently in an output file. &lt;br /&gt;
If we want to store the output content to a file we can use this command :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rollup src/main.js &amp;gt; bundle.js
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That is nice,                                                                                                 &lt;br /&gt;
but what if  we want some sort of configuration file like &lt;code class=&quot;highlighter-rouge&quot;&gt;webpack.config.js&lt;/code&gt; for webpack if we are familiar with it, so we don’t have to type everytime the destination file. &lt;br /&gt;
Well, rollup has an answer for that, just create &lt;code class=&quot;highlighter-rouge&quot;&gt;rollup.config.js&lt;/code&gt; file in the root of our project and when calling the rollup command add &lt;code class=&quot;highlighter-rouge&quot;&gt;-c&lt;/code&gt; flag which means hi rollup i have a configuration file please consider it. &lt;br /&gt;
Here is the command that we will use :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rollup src/main.js -c  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;At this moment &lt;code class=&quot;highlighter-rouge&quot;&gt;rollup.config.js&lt;/code&gt; file is empty and does nothing, so we need to add some configuration, here is a snippet of minimal configuration :&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// rollup.config.js&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'src/main.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  
  &lt;span class=&quot;na&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'dist/bundle.js'&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// equivalent to --output or &amp;gt; bundle.js&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;entry :&lt;/strong&gt; a property to specify the source files.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;dest :&lt;/strong&gt; a property to specify the destination file.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now everything is good,
but we still have one issue, the generated output is es6 code and till this moment, not all browsers fully support es6(although &lt;a href=&quot;https://www.mozilla.org/en-US/firefox/developer/&quot;&gt;Firefox Developer&lt;/a&gt; and &lt;a href=&quot;https://www.google.fr/chrome/browser/canary.html&quot;&gt;Chrome Canary&lt;/a&gt; do to some extent), therefore for prodcution code we need somekind of midlle man to convert the code to es5 that all browsers understand.&lt;/p&gt;

&lt;p&gt;For this job i can mention two tools that can be used with rollup, &lt;a href=&quot;https://www.npmjs.com/package/rollup-plugin-buble&quot;&gt;buble&lt;/a&gt; and &lt;a href=&quot;https://www.npmjs.com/package/rollup-plugin-babel&quot;&gt;babel plugin&lt;/a&gt;, may be there are others but i think these two options are fine, just pick one of them.&lt;/p&gt;

&lt;p&gt;In this article i picked &lt;a href=&quot;https://www.npmjs.com/package/rollup-plugin-buble&quot;&gt;buble&lt;/a&gt;, it is simple to use and we don’t need to install &lt;a href=&quot;https://www.npmjs.com/package/babel-preset-es2015-rollup&quot;&gt;babel-preset-es2015-rollup&lt;/a&gt;. &lt;br /&gt;
Use this command to save buble to our dev dependencies :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install rollup-plugin-buble --save-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, import buble in &lt;code class=&quot;highlighter-rouge&quot;&gt;rollup.config.js&lt;/code&gt; file and add &lt;code class=&quot;highlighter-rouge&quot;&gt;plugins&lt;/code&gt; property, so we end up with this :&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// import buble&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;buble&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'rollup-plugin-buble'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'src/main.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  
  &lt;span class=&quot;na&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'dist/bundle.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// equivalent to --output or &amp;gt; bundle.js&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;buble&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()]&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// plugins property to specify plugins to use.&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Finally&lt;/strong&gt; rerun &lt;code class=&quot;highlighter-rouge&quot;&gt;buble src/main.js -c&lt;/code&gt; command, and we should get a bundle file &lt;code class=&quot;highlighter-rouge&quot;&gt;dist/bundle.js&lt;/code&gt; containing es5 code that all browsers understand.&lt;/p&gt;
</description>
        <pubDate>Fri, 10 Jun 2016 00:00:00 +0300</pubDate>
        <link>https://ismnoiet.github.io/2016/06/10/Introduction-to-rollup/</link>
        <guid isPermaLink="true">https://ismnoiet.github.io/2016/06/10/Introduction-to-rollup/</guid>
        
        <category>javascript</category>
        
        <category>module</category>
        
        <category>bundler</category>
        
        <category>es6</category>
        
        <category>rollup.js</category>
        
        
        <category>JavaScript</category>
        
      </item>
    
      <item>
        <title>Be Thankful</title>
        <description>
&lt;p&gt;You are alive and you can read this, &lt;strong&gt;be thankful&lt;/strong&gt;, there is a lot of dead forgotten people out there.&lt;/p&gt;

&lt;p&gt;You can think and distinguish between the bad and the good, you are not fool, 
&lt;strong&gt;be thankful&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;You can see this beautiful world, you have two eyes,there are countless blind human being, &lt;strong&gt;be thankful&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;You have legs and you can go wherever you want, &lt;strong&gt;be thankful&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;You have hands you can touch anything you like, &lt;strong&gt;be thankful&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;You have parents, think about the ones who don’t, &lt;strong&gt;be thankful&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;You have a house, think about the homeless people, &lt;strong&gt;be thankful&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;You are educated, &lt;strong&gt;be thankful&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Even if you don’t have some of the previous things,
think about the things you have and others don’t, &lt;strong&gt;be thankful&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If you are like me, i assume you won’t sold your eyes and some other parts(at least)of your body for any amount of money, congratulation you are rich, &lt;strong&gt;be Thankful&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Life is too short, stop complaining and &lt;strong&gt;be thankful&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;…… and the list goes on, in fact you can’t count the number of things that you should be thankful for, therefore &lt;strong&gt;be thankful&lt;/strong&gt;, i’m sure good things are coming our way.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thanks for you time and hope you find it a gentle reminder&lt;/strong&gt;.&lt;/p&gt;
</description>
        <pubDate>Mon, 11 Apr 2016 00:00:00 +0300</pubDate>
        <link>https://ismnoiet.github.io/2016/04/11/be-thankful/</link>
        <guid isPermaLink="true">https://ismnoiet.github.io/2016/04/11/be-thankful/</guid>
        
        <category>inspiration</category>
        
        <category>human</category>
        
        <category>thoughts</category>
        
        
        <category>human</category>
        
      </item>
    
      <item>
        <title>A Must-have List Of Plugins For Sublime Text</title>
        <description>
&lt;p&gt;Sublime text is one of the most if not the most flexible hackable code editor, available for all OS with a huge list of plugins to make it even better.&lt;/p&gt;

&lt;p&gt;In this article, we’ll be talking about the indispensable plugins that you need to install if you want to gain a huge amount of time when using sublime text , without too much talking let’s get directly to the list.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Files handling&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Files handling is an essential part of any project, because we find our selves creating, opening a lot of files and folders.Using the traditional way(opening a file using the openfile dialog or moving the mouse around to do the job) can cost us some time and that is when the following list comes to play :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/skuroda/Sublime-AdvancedNewFile&quot;&gt;AdvancedNewFile&lt;/a&gt; :
  This plugin is excellent for creating folders and files, it can create files even if the parent folder doesn’t exist yet, which is cool and time saver .&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/rosshemsley/iOpener&quot;&gt;iOpener&lt;/a&gt; :
  With this plugin we can open files from any location in our computer.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Color highlighting&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Those plugins are pretty convenient when it comes to picking and choosing colors especially with CSS.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/Monnoroch/ColorHighlighter&quot;&gt;Color highlighter&lt;/a&gt; :
  As the name says, it is a color highlighter so we can write the hex or rgb code for a color and we get an instantly color changing according to the given color code.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/weslly/ColorPicker&quot;&gt;ColorPicker&lt;/a&gt; :
  This is useful when we want to pick a color and we forgot or don’t know exactly its corresponding code.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;HTML-CSS-JS Related&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/victorporof/Sublime-HTMLPrettify&quot;&gt;HTML-CSS-JS Prettify&lt;/a&gt; :
  A plugin for prettifying HTML-CSS-JS.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/weslly/Nettuts-Fetch&quot;&gt;Nettuts+ Fetch&lt;/a&gt; :
  This is useful if we have a defined list of plugins or libraries and we need
  to add them to our current project.
  However, with the appearance of front-end tools like bower and others, handling dependencies is not an issue anymore SO we can ignore this plugin, BUT for the sake of not leaving the code editor i think you may want to keep it around.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Strings manipulation Related&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jdc0589/CaseConversion&quot;&gt;Case Convertion&lt;/a&gt; : An awesome plugin to convert strings and switch  cases from camel case to snake case to whatever case you want.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Note :&lt;/strong&gt; 
This article was originally published on &lt;a href=&quot;https://medium.com/@hamism/a-must-have-list-of-plugins-for-sublime-text-a54e865ee26#.lqgrumnxd&quot;&gt;medium&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 24 Feb 2016 00:00:00 +0200</pubDate>
        <link>https://ismnoiet.github.io/2016/02/24/A-must-have-list-of-plugins-for-sublime-text/</link>
        <guid isPermaLink="true">https://ismnoiet.github.io/2016/02/24/A-must-have-list-of-plugins-for-sublime-text/</guid>
        
        <category>sublime-text</category>
        
        <category>editor</category>
        
        <category>code</category>
        
        <category>plugins</category>
        
        
        <category>tools</category>
        
      </item>
    
  </channel>
</rss>
